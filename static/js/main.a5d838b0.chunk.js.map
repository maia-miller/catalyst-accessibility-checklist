{"version":3,"sources":["components/accordion/accordion.tsx","pages/checklist/checklist.tsx","assets/data/element-data.tsx","assets/data/elements/aria-describedby.tsx","assets/data/elements/audio.tsx","assets/data/elements/auto-movement.tsx","assets/data/elements/button.tsx","assets/data/elements/captcha.tsx","assets/data/elements/carousel.tsx","assets/data/elements/dropdown.tsx","assets/data/elements/error-message.tsx","assets/data/elements/form-label.tsx","assets/data/elements/return-to-top.tsx","pages/main/main.tsx","reportWebVitals.js","index.js"],"names":["Accordion","props","accordionType","title","subtitle","key","criteria","subheadings","resources","codeSamples","code","code2","instructions","useState","isAccordionOpen","setIsAccordionOpen","className","onClick","map","criterion","index","dangerouslySetInnerHTML","__html","description","wcag","length","subheading","resource","href","link","codeSample","sentence","Checklist","data","element","elementData","output","Main","visibleData","setVisibleData","searchTerm","setSearchTerm","useEffect","searchData","allElementsData","forEach","elementDescriptions","toString","toLowerCase","indexOf","push","type","name","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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YAAa,0HACbC,KAAM,SAER,CACED,YAAa,yNACbC,KAAM,SAER,CACED,YAAa,iJACbC,KAAM,QACNd,KAAM,oEAGVH,YAAa,CACX,CACEJ,MAAO,eACPG,SAAU,CACR,CACEiB,YAAa,sKACbC,KAAM,SAER,CACED,YAAa,6IACbC,KAAM,QACNd,KAAM,mEAER,CACEa,YAAa,iJACbC,KAAM,QACNd,KAAM,gEAIZ,CACEP,MAAO,2CACPG,SAAU,CACR,CACEiB,YAAa,wEACbC,KAAM,SAER,CACED,YAAa,oOACbC,KAAM,WAIZ,CACErB,MAAO,mBACPG,SACA,CACE,CACEiB,YAAa,uPACbC,KAAM,gBACNd,KAAM,qJACNC,MAAO,iJAKfF,YACE,CACE,CACEN,MAAO,iBACPiC,OAAQ,2BACR1B,KAAM,oGAER,CACEP,MAAO,iBACPS,aAAc,CACZ,uDACA,6DACA,oDAEFwB,OAAQ,2BACR1B,KAAM,sNC/FkB,CAC9BP,MAAO,UACPG,SACE,CACE,CACEiB,YAAa,4IACbC,KAAM,WCNmB,CAC/BrB,MAAO,WACPG,SAAU,CACR,CACEiB,YAAa,oJACbC,KAAM,iBAER,CACED,YAAa,gMACbC,KAAM,SAER,CACED,YAAa,yKACbC,KAAM,SAER,CACED,YAAa,mFACbC,KAAM,SAER,CACED,YAAa,qFACbC,KAAM,SAER,CACED,YAAa,6EACbC,KAAM,SAER,CACED,YAAa,oCACbC,KAAM,UAGVhB,UAAW,CACT,CACEL,MAAO,sBACP0B,KAAM,yEACNN,YAAa,2FCpCc,CAC/BpB,MAAO,oBACPG,SAAU,CACR,CACEiB,YAAa,0FACbC,KAAM,SAER,CACED,YAAa,oKACbC,KAAM,UAGVhB,UAAW,CACT,CACEL,MAAO,yBACP0B,KAAM,4DACNN,YAAa,MChBkB,CACnCpB,MAAO,qBACPG,SAAU,CACR,CACEiB,YAAa,6FACbC,KAAM,gBACNd,KAAM,yHAER,CACEa,YAAa,oIACbC,KAAM,SAER,CACED,YAAa,qJACbC,KAAM,SAER,CACED,YAAa,8HACbC,KAAM,iBAER,CACED,YAAa,6DACbC,KAAM,MACNd,KAAM,4DAER,CACEa,YAAa,iMACbC,KAAM,kBAGVjB,YAAa,CACX,CACEJ,MAAO,0BACPG,SAAU,CACR,CACEiB,YAAa,uSACbC,KAAM,mBAIZ,CACErB,MAAO,4BACPG,SAAU,CACR,CACEiB,YAAa,sLACbC,KAAM,iBAER,CACED,YAAa,6IACbC,KAAM,iBAER,CACED,YAAa,4KACbC,KAAM,gBACNd,KAAM,kHAKdD,YAAa,CACX,CACEN,MAAO,uBACPS,aAAc,CACZ,yCACA,4OACA,oRACA,2JACA,uXAEFF,KAAM,yMACNC,MAAO,wPCtEqB,CAChCR,MAAO,iBACPG,SACE,CACE,CACEiB,YAAa,KACbC,KAAM,OAGZjB,YAAa,CACX,CACEJ,MAAO,OACPG,SAAU,CACR,CACEiB,YAAa,+LACbC,KAAM,gBAER,CACED,YAAa,6FACbC,KAAM,MAER,CACED,YAAa,kHACbC,KAAM,MAER,CACED,YAAa,sJACbC,KAAM,MAER,CACED,YAAa,gHACbC,KAAM,MAER,CACED,YAAa,oJACbC,KAAM,iBAER,CACED,YAAa,2BACbC,KAAM,MAER,CACED,YAAa,4GACbC,KAAM,MAER,CACED,YAAa,oDACbC,KAAM,MAER,CACED,YAAa,+GACbC,KAAM,mBAIZ,CACErB,MAAO,SACPG,SAAU,CACR,CACEiB,YAAa,0MACbC,KAAM,SAER,CACED,YAAa,iGACbC,KAAM,WAIZ,CACErB,MAAO,0BACPG,SAAU,CACR,CACEiB,YAAa,kMACbC,KAAM,MAER,CACED,YAAa,+DACbC,KAAM,iBAER,CACED,YAAa,yIACbC,KAAM,mBAIZ,CACErB,MAAO,aACPG,SAAU,CACR,CACEiB,YAAa,uaACbC,KAAM,aC1FoB,CAClCrB,MAAO,gBACPG,SACE,CACE,CACEiB,YAAa,yEACbC,KAAM,gBAER,CACED,YAAa,0GACbC,KAAM,gBAER,CACED,YAAa,oFACbC,KAAM,mBCkDCa,G,MA3DF,WAAO,IAAD,EACiCxB,mBAAS,IAD1C,mBACVyB,EADU,KACGC,EADH,OAGmB1B,mBAAS,IAH5B,mBAGV2B,EAHU,KAGEC,EAHF,KA+BjB,OA3BAC,qBAAU,WAMR,GAJAH,EAAe,IAIXC,EAAWf,OAAS,GAAoB,MAAfe,EAAoB,CAC/C,IAAIG,EAAyB,GAE7BC,EAAgBC,SAAQ,SAAAX,GAEtB,IAAIY,EAAqCZ,EAAQ5B,SAASY,KAAI,SAAAC,GAC5D,OAAOA,EAAUI,eAGC,UAAMW,EAAQ/B,MAAd,YAAuB2C,EAAoBC,YAG5CC,cAAcC,QAAQT,EAAWQ,gBAAkB,GACpEL,EAAWO,KAAKhB,MAIpBK,EAAeI,MAEhB,CAACH,IAGF,qBAAKxB,UAAU,mBAAf,SACE,iCACA,sBAAKA,UAAU,gBAAf,UACE,yDACA,sBAAKA,UAAU,uBAAf,UACE,sDACA,uBACEmC,KAAK,OACLC,KAAK,SACLC,SAAU,SAACC,GAAOb,EAAca,EAAEC,OAAOC,aAG7C,qBAAKxC,UAAU,mBAAf,SACE,uCAAS,wBAAQC,QAAS,WAAOsB,EAAeK,IAAvC,uCAIX,qBAAK5B,UAAU,oBAAf,SACGsB,GACC,cAAC,EAAD,CAAWL,KAAMK,aC9CdmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a5d838b0.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport { Criterion, Subheading, Resource, CodeSample } from '../../assets/data/models';\n\nimport './accordion.scss';\n\ninterface Props {\n  accordionType: string,\n  title?: string, // h2, main accordion heading\n  subtitle?: string, // h3, accordion heading for subaccordions\n  key: number,\n  criteria?: Array<Criterion>,\n  subheadings?: Array<Subheading>,\n  resources?: Array<Resource>,\n  codeSamples?: Array<CodeSample>\n  instructions?: string[],\n  code?: string,\n  code2?: string\n}\n\nconst Accordion = (props: Props) => {\n  const { accordionType, title, subtitle, key, criteria, subheadings, resources, codeSamples, code, code2, instructions } = props\n  const [isAccordionOpen, setIsAccordionOpen] = useState(false)\n\n  return (\n    <div className={accordionType + ' accordion-wrapper'} key={`${accordionType}-${key}`}>\n\n      <div className=\"accordion-title\" onClick={() => {setIsAccordionOpen(!isAccordionOpen)}}>\n        <h2>{title}</h2>\n        <h3>{subtitle}</h3>\n      </div>\n\n      <div className=\"accordion-body-wrapper\">\n        { isAccordionOpen &&\n          <div className=\"accordion-body\">\n\n            <ul>\n              {criteria && criteria.map((criterion: Criterion, index: number) => {\n                return (\n                  <li key={index}>\n                    <span dangerouslySetInnerHTML={{ __html: criterion.description}}></span>\n                    {criterion.code &&\n                      <span>: <code dangerouslySetInnerHTML={{ __html: criterion.code}}></code>\n                      </span>\n                    }\n                    <span>&nbsp;({criterion.wcag})</span>\n                  </li>\n                )\n              })}\n            </ul>\n\n            {subheadings &&\n              subheadings.length > 0 &&\n              subheadings.map((subheading:\n              Subheading, index: number) => {\n              return (\n                <Accordion\n                  accordionType={'accordion-subheading'}\n                  subtitle={subheading.title}\n                  key={index}\n                  criteria={subheading.criteria}\n                />\n              )\n            })}\n\n            {resources && resources.length > 0 &&\n              <div>\n                <h3>Resources</h3>\n                <ul>\n                  {resources.map((resource) => {\n                    return (\n                      <li>\n                        <a href={resource.link}>\n                          {resource.title}\n                        </a>\n                        {resource.description && (\n                          `: ${resource.description}`\n                        )}\n                      </li>\n                    )\n                  })}\n                </ul>\n              </div>\n            }\n\n            {codeSamples && codeSamples.length > 0 &&\n              codeSamples.map((codeSample: CodeSample, index: number) => {\n                return (\n                  <Accordion\n                    accordionType={'accordion-code'}\n                    subtitle={`Code Sample: ${codeSample.title}`}\n                    key={index}\n                    instructions={codeSample.instructions}\n                    code={codeSample.code}\n                    code2={codeSample.code2}\n                  />\n                )\n              })\n            }\n\n            {instructions &&\n              <ul>\n                {instructions.map((sentence: string, index: number) => {\n                  return <li key={index} dangerouslySetInnerHTML={{ __html: sentence}}></li>\n                })}\n              </ul>\n            }\n\n            {code &&\n              <div className=\"codeblock\" dangerouslySetInnerHTML={{ __html: code}}>\n              </div>\n            }\n            {code2 &&\n              <div className=\"codeblock\" dangerouslySetInnerHTML={{ __html: code2}}>\n              </div>\n            }\n          </div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Accordion;\n","import React from 'react';\n\nimport Accordion from '../../components/accordion/accordion'\n\ninterface Props {\n  data: any\n}\n\nconst Checklist = (props: Props) => {\n  return (\n    <div className=\"checklist-content\">\n      { props.data.length > 0 &&\n        props.data.map((element: any, index: number) => {\n          return (\n            <Accordion\n              accordionType={'accordion-element'}\n              title={element.title}\n              key={index}\n              criteria={element.criteria}\n              subheadings={element.subheadings}\n              resources={element.resources}\n              codeSamples={element.codeSamples}\n            />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default Checklist;\n","import { ariaDescribedby } from './elements/aria-describedby'\nimport { audio } from './elements/audio'\nimport { autoMovement } from './elements/auto-movement'\nimport { button } from './elements/button'\nimport { captcha } from './elements/captcha'\nimport { carousel } from './elements/carousel'\nimport { dropdown } from './elements/dropdown'\nimport { errorMessage } from './elements/error-message'\nimport { formLabel } from './elements/form-label'\nimport { returnToTop } from './elements/return-to-top'\n\n\nconst elementData = [\n  ariaDescribedby,\n  audio,\n  autoMovement,\n  button,\n  captcha,\n  carousel,\n  dropdown,\n  errorMessage,\n  formLabel,\n  returnToTop\n]\n\nexport default elementData\n","import { Element } from '../models'\n\nexport const ariaDescribedby: Element = {\n  title: '<aria-describedby>, <aria-labelledby>',\n  criteria: [\n    {\n      description: 'Not that common, these are used when the description of the element and the element itself aren’t immediately next to each other',\n      wcag: '1.1.1, 1.3.1',\n    },\n    {\n      description: 'The value for <code>&lt;aria-describedby&gt;</code> or <code>&lt;aria-labelledby&gt;</code> isn’t the label itself; rather, it is a reference to a <code>&lt;p&gt;</code> or <code>&lt;span&gt;</code> with the same id which in turn is the actual description/label',\n      wcag: 'HTML principles',\n    },\n    {\n      description: '<code>&lt;aria-describedby&gt;</code> is often used to programmatically associate a form error with its corresponding field. See \"Error message\" for more information',\n      wcag: 'Best Practice'\n    }\n  ],\n  codeSamples: [\n    {\n      title: 'How to use <aria-describedby>',\n      instructions: [\n        'In this example, we are using <code>&lt;aria-describedby&gt;</code> to provide a longer descirption of a button.',\n        'We do so by matching the ID of <code>&lt;p&gt;</code> to <code>&lt;aria-describedby&gt;</code>',\n        'This attribute is often only used for screen-readers, so we have also applied a screen-reader-only class onto our <code>&lt;p&gt;</code>',\n        'Whitespaces are not allowed in ID’s'\n      ],\n      code: '&lt;button aria-describedby=\"btnDesc\"&gt;Click here&lt;/button&gt;<br>&lt;p id=\"btnDesc\" class=\"scr-only\"&gt;This is a longer description of what the button does.&lt;/p&gt;',\n    }\n  ]\n}\n","import { Element } from '../models'\n\nexport const audio: Element = {\n  title: 'Audio',\n  criteria: [\n    {\n      description: 'Avoid having audio play immediately and automatically on page load',\n      wcag: 'Best Practice',\n    },\n    {\n      description: 'If you do have audio play automatically, if it plays for <strong>more than 3 sec</strong>, you must provide a means to stop, pause, mute, or adjust volume of audio',\n      wcag: '1.4.2',\n    },\n    {\n      description: 'Mechanism to do so must be accessible by keyboard alone',\n      wcag: '2.1.1, 1.4.2',\n    },\n    {\n      description: 'Mechanism shouldn’t impact audio system-wide, just on the page',\n      wcag: '1.4.2',\n    }\n  ]\n}\n","import { Element } from '../models'\n\nexport const autoMovement: Element = {\n  title: 'Automatic movement (moving, blinking, scrolling, updating, flashing)',\n  criteria: [\n    {\n      description: 'If the moving/blinking/scrolling lasts longer than <strong>5 sec</strong>, the user must be able to pause, stop, or hide the moving element, or the user must be able to control the timing of the updates. The exception is if the automatic action is essential',\n      wcag: '2.2.2',\n    },\n    {\n      description: 'Pause/stop/hide must be keyboard accessible',\n      wcag: '2.1.1',\n    },\n    {\n      description: 'Automatic movement like scrolling should be gradual and keep the focus element on-screen',\n      wcag: 'Best Practice',\n    },\n    {\n      description: 'Use HTML to notify screen readers of changing content. See options below',\n      wcag: 'HTML Principles',\n    },\n  ],\n  codeSamples: [\n    {\n      title: 'Dynamically changing content - Option 1: <role> attribute',\n      instructions: [\n        '<code>&lt;role&gt;</code> gives us many things for free. In this case <code>&lt;role=\"alert\"&gt;</code> automatically alerts screen readers of dynamic content changes',\n        'Setting <code>&lt;role=\"alert\"&gt;</code> is equivalent to setting <code>&lt;aria-live=\"assertive\"&gt;</code> and <code>&lt;aria-atomic=\"true\"&gt;</code>. Therefore, use <em>either</em> <code>&lt;aria-live&gt;</code> or <code>&lt;role=\"alert\"&gt;</code>, but not both. You do <strong>not</strong> need to use <code>&lt;aria-atomic&gt;</code> here',\n        '<code>&lt;role&gt;</code> is meant for when content dynamically changes. If a page loads with multiple visible alerts scattered throughout, none would be read because they are not dynamically triggered. They will be read when the content within them changes',\n        'Alerts, by definition, are disruptive, so use it sparingly'\n      ],\n      code: '<code>&lt;p role=\"alert\"&gt;</code>This is the content of the dynamic generation or alert&lt;/p&gt;'\n    },\n    {\n      title: 'Dynamically changing content - Option 2: <aria-live> and <aria-atomic> attributes',\n      instructions: [\n        'Normally, we set the politeness level to \"polite\": <code>&lt;div aria-live=\"polite\"</code>. This means the screen reader will speak changes whenever the user is idle',\n        'For regions which are not important, or would be annoying because of rapid updates or other reasons, silence them with <code>&lt;div aria-live=\"off\"</code>',\n        'Use <em>either</em> <code>&lt;aria-live&gt;</code> or <code>&lt;role=\"alert\"&gt;</code>, but not both (&lt;role&gt; has &lt;aria-live&gt; built into it)',\n        'Use <code>&lt;aria-live&gt;</code> in conjunction with <code>&lt;aria-atomic=\"true\"&gt;</code> when you want the screen reader to read out the <em>entire</em> region, not just the parts that have changed - by default, screen readers will only present the <strong>changed parts</strong> of an element (since by default, <code>&lt;aria-atomic=\"false\"&gt;</code>)',\n        'Apply these attributes to the parent element that <strong>already exists</strong> in the DOM, not the elements that are generated on the update'\n      ],\n      code: '&lt;div aria-live=\"polite\" aria-atomic=\"true\"&gt;<br>&nbsp;&lt;h2&gt;Survey Results&lt;/h2&gt;<br>&nbsp;&lt;p&gt;This paragraph dynamically changes based on user input or other factors. By setting the parent div as aria-atomic=\"true\", both this paragraph and the &lt;h2&gt; will be read out to the screen reader.&lt;/p&gt;<br>&lt;/div&gt;',\n      code2: '&lt;div aria-live=\"polite\"&gt;<br>&nbsp;&lt;span&gt;Your form has been submitted!&lt;/span&gt;<br>&lt;/div&gt;'\n    },\n  ]\n}\n","import { Element } from '../models'\n\nexport const button: Element = {\n  title: 'Button',\n  criteria: [\n    {\n      description: 'If it is a button, use <code>&lt;button&gt;</code> - it gives you a lot of free accessibility features!',\n      wcag: 'HTML Principles, Best Practice',\n    },\n    {\n      description: 'Always include a type to your button. Include <code>&lt;type=button&gt;</code> onto generic buttons to prevent the browser from trying to submit a form when clicked. Your other options are <code>reset</code> or <code>submit</code>. If none apply, reconsider if this is a button (perhaps it is an <code>&lt;a&gt;</code>)',\n      wcag: 'Best Practice',\n    },\n    {\n      description: 'Disabled buttons do <strong>not</strong> need to meet colour contrast requirements',\n      wcag: '1.4.3',\n    },\n\n    {\n      description: 'It must be visually apparent when a button is in focus',\n      wcag: '2.4.7',\n    },\n    {\n      description: 'Buttons that play the same function across different pages should have the same aria-label/visual label across the site',\n      wcag: '3.2.4',\n    },\n    {\n      description: 'The down part of pressing a button should <strong>not</strong> trigger the event. The event trigger should be when the button is released (the up event). Use <code>onClick</code> instead of <code>onMouseDown</code>',\n      wcag: '2.5.2',\n    },\n    {\n      description: 'Buttons should always have &lt;aria-label&gt; in order for assistive technology to differentiate each button. See subheading for usage details',\n      wcag: '2.5.3',\n      code: '&lt;button aria-label=\"Contact Us\"&gt;Contact Us&lt;/button&gt;'\n    },\n  ],\n  subheadings: [\n    {\n      title: '<aria-label>',\n      criteria: [\n        {\n          description: '&lt;aria-label&gt; allows assistive technology to differentiate between buttons, ie when a user reads out a button, the technology will know which button they mean',\n          wcag: '2.5.3',\n        },\n        {\n          description: 'Buttons should have &lt;aria-label&gt; in order for assistive technology to differentiate each button. &lt;aria-label&gt; should be unique',\n          wcag: '2.5.3',\n          code: '&lt;button aria-label=\"Contact Us\"&gt;Contact Us&lt;/button&gt;'\n        },\n        {\n          description: 'Ideally &lt;aria-label&gt; matches the visible text exactly; at a minimum, the &lt;aria-label&gt; should <em>start</em> with the visible label',\n          wcag: '2.5.3',\n          code: '&lt;button aria-label=\"Buy Sneakers\"&gt;Buy&lt;/button&gt;'\n        },\n      ]\n    },\n    {\n      title: 'Custom-made buttons (not using <button>)',\n      criteria: [\n        {\n          description: 'Custom buttons must behave exactly like a <code>&lt;button&gt;</code>',\n          wcag: '4.1.2',\n        },\n        {\n          description: 'Custom buttons must be able to be made active with enter <strong>and</strong> spacebar, and state when it is disabled. See “Overall (custom elements)” if you are creating a button without <code>&lt;button&gt;</code>',\n          wcag: '4.1.2',\n        }\n      ]\n    },\n    {\n      title: 'Icons as buttons',\n      criteria:\n      [\n        {\n          description: 'When we are using icons as buttons, we essentially want screen reader users to experience it as if it were a regular button, so we hide the icon itself (via <code>&lt;aria-hidden&gt;</code> + CSS) and include an aria-label like a regular button',\n          wcag: 'Best Practice',\n          code: '<code>&lt;button aria-label=\"Find out more\"&gt;</code><code>&lt;i aria-hidden=\"true\"&gt;</code><code>&lt;/i&gt;</code><code>&lt;/button&gt;</code>',\n          code2: '<code>&lt;button&gt;</code><code>&lt;i aria-hidden=\"true\"&gt;</code><code>&lt;/i&gt;</code>Find out more<code>&lt;/button&gt;</code> [TBC]'\n        },\n      ]\n    }\n  ],\n  codeSamples:\n    [\n      {\n        title: 'Regular Button',\n        output: 'img src string goes here',\n        code: '<code>&lt;button type=\"button\" aria-label=\"Find out more\"&gt;Find out more&lt;/button&gt;</code>',\n      },\n      {\n        title: 'Icon as button',\n        instructions: [\n          'Wrapping element has aria-label like standard button',\n          'Icon itself is hidden via <code>&lt;aria-hidden&gt;</code>',\n          'Use CSS on <code>&lt;i&gt;</code> to insert icon'\n        ],\n        output: 'img src string goes here',\n        code: '<code>&lt;button aria-label=\"Find out more\"&gt;</code><code>&lt;i aria-hidden=\"true\"&gt;</code><code>&lt;/i&gt;</code><code>&lt;/button&gt;<br><br>// CSS:<br>i {<br>&nbsp;background-image: \\'url\\'<br>}</code>',\n      }\n    ]\n}\n","import { Element } from '../models'\n\nexport const captcha: Element = {\n  title: 'Captcha',\n  criteria:\n    [\n      {\n        description: 'Ensure there is an option to complete the CAPTCHA without vision (the alternative is usually an audio CAPTCHA, but modalities can differ)',\n        wcag: '1.1.1',\n      },\n    ],\n}\n","import { Element } from '../models'\n\nexport const carousel: Element = {\n  title: 'Carousel',\n  criteria: [\n    {\n      description: 'don’t use if possible: there are a lot of accessibility challenges with carousels (plus they’re ineffective marketing tools in general)',\n      wcag: 'Best Practice',\n    },\n    {\n      description: 'Screen reader users need to be notified that they’ve entered into a carousel and which slide they are currently on, and changes to carousel items must be communicated to screen readers',\n      wcag: '1.3.1',\n    },\n    {\n      description: 'All functionality, including navigating between carousel items, must be operable by keyboard (ie dots under carousel or prev/next arrows that are keyboard accessible)',\n      wcag: '2.1.1',\n    },\n    {\n      description: 'User must be able to flip through carousel images via keyboard navigation keys, ',\n      wcag: '2.1.1',\n    },\n    {\n      description: 'User must be able to pause/stop/hide or control the timing of the carousel changes',\n      wcag: '2.2.2',\n    },\n    {\n      description: 'Carousels must indicate its role and state, and its total number of slides',\n      wcag: '4.1.2',\n    },\n    {\n      description: '\"Focus\" must be visually apparent',\n      wcag: '2.4.7',\n    },\n  ],\n  resources: [\n    {\n      title: 'Accessible carousel',\n      link: 'https://w3c.github.io/aria-practices/examples/carousel/carousel-1.html',\n      description: 'If you must create a carousel, inspect this page\\'s carousel for an accessible example'\n    }\n  ]\n}\n","import { Element } from '../models'\n\nexport const dropdown: Element = {\n  title: 'Dropdown/<select>',\n  criteria: [\n    {\n      description: 'want to group options within the select? Use <code><code>&lt;optgroup&gt;</code></code>',\n      wcag: '1.3.1',\n    },\n    {\n      description: 'user <strong>must</strong> be able to cycle through dropdown using arrow keys without triggering a substantial page change (until they actually select an option)',\n      wcag: '3.2.2',\n    },\n  ],\n  resources: [\n    {\n      title: 'Examples of <optgroup>',\n      link: 'https://www.w3.org/TR/2014/NOTE-WCAG20-TECHS-20140408/H85',\n      description: ''\n    }\n  ]\n}\n","import { Element } from '../models'\n\nexport const errorMessage: Element = {\n  title: 'Form Error message',\n  criteria: [\n    {\n      description: 'Use <code>&lt;aria-describedby&gt;</code> to programmatically associate fields with errors',\n      wcag: 'Best Practice',\n      code: '&lt;input type=\"text\" aria-describedBy=\"err_email\" /&gt;&lt;span id=\"err_email\"&gt;Error: Incorrect data&lt;/span&gt;'\n    },\n    {\n      description: 'Error message must identify which field or field grouping has the error using <strong>text</strong> (do not rely on colour alone)',\n      wcag: '3.3.1',\n    },\n    {\n      description: 'User <strong>must</strong> be able to adjust when error message disappears. In other words, error message should not appear briefly then disappear',\n      wcag: '2.2.1',\n    },\n    {\n      description: 'Apply <code>&lt;aria-invalid=\"true\"&gt;</code> to invalid fields. Be sure to remove the attribute once it no longer applies',\n      wcag: 'Best Practice'\n    },\n    {\n      description: 'Tip: you can style using <code>&lt;aria-invalid&gt;</code>',\n      wcag: 'CSS',\n      code: '[aria-invalid] { border-color: red; border-right: 5px; }'\n    },\n    {\n      description: 'Consider stating or listing error messages at the top of a form. Label this area via a heading or <code>&lt;aria-live=\"polite\"&gt;</code>. See \"Form Validation on Submit\" below for more info',\n      wcag: 'Best Practice',\n    },\n  ],\n  subheadings: [\n    {\n      title: 'Dynamic Form Validation',\n      criteria: [\n        {\n          description: 'You do not need to control focus for dynamic validation. When a user tabs to the next field, they are expecting focus to go to that field. Intercepting/stealing focus can be confusing. An alert is enough to notify them that the previous field has an error, and they can choose to return to it',\n          wcag: 'Best Practice',\n        },\n      ]\n    },\n    {\n      title: 'Form Validation on Submit',\n      criteria: [\n        {\n          description: 'You should redirect focus if validation occurs on hitting submit. Send focus either to the first invalid field, or - better yet - to a list of errors stated at the top of the form',\n          wcag: 'Best Practice'\n        },\n        {\n          description: 'It\\'s a good idea if each item in that list of errors at the top of the form were to link to the invalid item, to make it easier to correct',\n          wcag: 'Best Practice'\n        },\n        {\n          description: 'Use <code>&lt;role=\"alert\"&gt;</code> to notify screen readers that there is a list of errors. As usual, apply the attribute to an element that already exists in the DOM',\n          wcag: 'Best Practice',\n          code: '&lt;div role=\"alert\"&gt;<br>&nbsp;&lt;span&gt;<em>dynamically generated error</em>&lt;/span&gt;&lt;/div&gt;'\n        }\n      ]\n    }\n  ],\n  codeSamples: [\n    {\n      title: 'Inline Error Message',\n      instructions: [\n        'This is an example of an invalid field',\n        '<code>&lt;aria-invalid&gt;</code> should be updated accordingly. The content inside the error <code>&lt;span&gt;</code> should also be added or removed accordingly, otherwise it will always be read out as part of the aria-describedby',\n        '2 ways to notify screen readers of errors: <code>&lt;role=alert&gt;</code> or <code>&lt;aria-live&gt;</code>. Use one or the other, not both. Apply it to the parent, ie a DOM element that already exists, not the appearing/disappearing error <code>&lt;span&gt;</code> itself',\n        'Option 1) <code>&lt;role=alert&gt;</code>: automatically sets it to <code>&lt;aria-live=\"assertive\"&gt;</code> & <code>&lt;aria-atomic=\"true\"&gt;</code>',\n        'Option 2) Alternatively, replace <code>&lt;role=\"alert\"&gt;</code> with <code>&lt;div aria-live=\"assertive\" aria-relevant=\"additions removals\"&gt;</code>. <code>&lt;aria-live=\"assertive\"&gt;</code> means updates will be read out immediately, <code>&lt;aria-relevant&gt;</code> specifies that we want the region to be read out when error messages are both added or removed'\n      ],\n      code: '&lt;input type=\"text\" aria-describedby=\"err_email\" aria-invalid=\"true\" /&gt;<br>&lt;div id=\"err_email\" role=\"alert\"&gt;<br>&nbsp;&lt;span&gt;Error: Invalid email address&lt;/span&gt;<br>&lt;/div&gt;',\n      code2: '&lt;input type=\"text\" aria-describedby=\"err_email\" aria-invalid=\"true\" /&gt;<br>&lt;div id=\"err_email\" aria-live=\"assertive\" aria-relevant=\"additions removals\"&gt;<br>&nbsp;&lt;span&gt;Error: Invalid email address&lt;/span&gt;<br>&lt;/div&gt;'\n    }\n  ]\n}\n","import { Element } from '../models'\n\nexport const formLabel: Element = {\n  title: 'Form <label>\\'s',\n  criteria:\n    [\n      {\n        description: '--',\n        wcag: '--',\n      },\n    ],\n  subheadings: [\n    {\n      title: 'HTML',\n      criteria: [\n        {\n          description: 'each <code>&lt;label&gt;</code> should be paired with a form element (no <code>&lt;label&gt;</code> should stand on its own), and each form element should have a <code>&lt;label&gt;</code>',\n          wcag: '1.3.1, 3.3.2'\n        },\n        {\n          description: '<code>&lt;label&gt;</code> comes after the input element for checkboxes and radio buttons:',\n          wcag: '--'\n        },\n        {\n          description: '• <code>&lt;input type=\"checkbox\"/&gt;</code><code>&lt;label&gt;</code>Option 1<code>&lt;/label&gt;</code>',\n          wcag: '--'\n        },\n        {\n          description: '• see formatted examples of checkboxes and radio buttons under “Examples”: https://www.w3.org/TR/2014/NOTE-WCAG20-TECHS-20140408/H44',\n          wcag: '--'\n        },\n        {\n          description: '<code>&lt;div&gt;</code> and <code>&lt;p&gt;</code> are not accessible children of <code>&lt;label&gt;</code>',\n          wcag: '--'\n        },\n        {\n          description: 'use for/id method: <code>&lt;label for=\"firstname\"&gt;</code>First name:<code>&lt;/label&gt;</code>   <code>&lt;input id=\"firstname\" /&gt;</code>',\n          wcag: 'Best Practice'\n        },\n        {\n          description: '• for/id must match',\n          wcag: '--'\n        },\n        {\n          description: '• input’s name and id *can* match, but both must be present and id *must* be unique on the page',\n          wcag: '--'\n        },\n        {\n          description: '• id’s *cannot* include any whitespaces',\n          wcag: '--'\n        },\n        {\n          description: 'do *not* use <code>&lt;label&gt;</code> for buttons or for inputs with type=image/hidden/button/submit/reset',\n          wcag: 'Best Practice'\n        },\n      ]\n    },\n    {\n      title: 'Naming',\n      criteria: [\n        {\n          description: '<code>&lt;label&gt;</code> must include the name attribute which is identical or at least contains the visible text: <code>&lt;label name=\"First name\"&gt;</code>First name:<code>&lt;/label&gt;</code>',\n          wcag: '2.5.3'\n        },\n        {\n          description: 'form fields that play the same function across different pages should have the same label+name',\n          wcag: '3.2.4'\n        },\n      ]\n    },\n    {\n      title: 'Alternatives to <label>',\n      criteria: [\n        {\n          description: 'should use <code>&lt;label&gt;</code> when possible, but if not (ie, search form that has no text next to it saying what it is), use <code>&lt;input title=\"Type search term here\" /&gt;</code>',\n          wcag: '--'\n        },\n        {\n          description: '• only use  OR title attribute for a given form element',\n          wcag: 'Best Practice'\n        },\n        {\n          description: '• “title” attribute can be problematic, so avoid using it and again try to use <code>&lt;label&gt;</code> when possible',\n          wcag: 'Best Practice'\n        },\n      ]\n    },\n    {\n      title: 'Exceptions',\n      criteria: [\n        {\n          description: '<code>&lt;labels&gt;</code>s are not necessary for: A) dropdown menu that filters/limits scope of search, B) group of fields for one data point (ie, phone #, social security #, date, where there are multiple inputs for that one data point) where there is a visual label C) Globally-recognized icons, ie search magnifying glass, hamburger menu 3 stacked lines, settings gear, or delete trash can D) table of form controls',\n          wcag: '3.3.2'\n        }\n      ]\n    }\n  ],\n}\n","import { Element } from '../models'\n\nexport const returnToTop: Element = {\n  title: 'Return to top',\n  criteria:\n    [\n      {\n        description: 'screen reader and keyboard/tabbing focus moves along with visual focus',\n        wcag: '1.3.2, 2.4.3',\n      },\n      {\n        description: '     elements that are interactive (like links) receive focus. Try not to give focus to static elements',\n        wcag: '1.3.2, 2.4.3',\n      },\n      {\n        description: '     set tab focus with attribute tab-index: <code>&lt;div tab-index=1&gt;</code>',\n        wcag: '1.3.2, 2.4.3',\n      },\n    ],\n}\n","import React, { useState, useEffect } from 'react';\n\nimport Checklist from '../checklist/checklist'\nimport allElementsData from '../../assets/data/element-data'\n\nimport './main.scss';\n\nconst Main = () => {\n  const [visibleData, setVisibleData]: Array<any> = useState([])\n\n  const [searchTerm, setSearchTerm] = useState('')\n  useEffect(() => {\n    // 1) Clear \"view All\", then do search\n    setVisibleData([]);\n\n    // 2) Search\n    // don't search empty string or single space\n    if (searchTerm.length > 0 && searchTerm !== ' ') {\n      let searchData: Array<any> = []\n\n      allElementsData.forEach(element => {\n        // pull out descriptions into an array\n        let elementDescriptions: Array<string> = element.criteria.map(criterion => {\n          return criterion.description\n        })\n        // convert array into string, and add title\n        const searchableText = `${element.title} ${elementDescriptions.toString()}`\n\n        // now search the array\n        if (searchableText.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {\n          searchData.push(element)\n        }\n      })\n\n      setVisibleData(searchData)\n    }\n  }, [searchTerm])\n\n  return (\n    <div className=\"mainpage-wrapper\">\n      <main>\n      <div className=\"mainpage-hero\">\n        <h1>Accessibility Checklist</h1>\n        <div className=\"search-input-wrapper\">\n          <p>Search for an element</p>\n          <input\n            type=\"text\"\n            name=\"search\"\n            onChange={(e) => {setSearchTerm(e.target.value)}}\n          />\n        </div>\n        <div className=\"view-all-wrapper\">\n          <span>or <button onClick={() => {setVisibleData(allElementsData)}}>view all elements</button></span>\n        </div>\n      </div>\n\n        <div className=\"checklist-wrapper\">\n          {visibleData && (\n            <Checklist data={visibleData}/>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Main from './pages/main/main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}