{"version":3,"sources":["components/accordion/accordion.tsx","pages/checklist/checklist.tsx","assets/data/element-data.tsx","assets/data/elements/aria-describedby.tsx","assets/data/elements/audio.tsx","assets/data/elements/auto-movement.tsx","assets/data/elements/button.tsx","assets/data/elements/captcha.tsx","assets/data/elements/carousel.tsx","assets/data/elements/return-to-top.tsx","pages/main/main.tsx","reportWebVitals.js","index.js"],"names":["Accordion","props","accordionType","title","key","criteria","subheadings","resources","codeSamples","code","useState","isAccordionOpen","setIsAccordionOpen","className","onClick","map","criterion","index","description","wcag","length","subheading","resource","href","link","codeSample","Checklist","data","element","elementData","code2","output","Main","visibleData","setVisibleData","searchTerm","setSearchTerm","useEffect","searchData","allElementsData","forEach","elementDescriptions","toString","toLowerCase","indexOf","push","type","name","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAgGeA,G,MA/EG,SAAZA,EAAaC,GAAkB,IAC3BC,EAAmFD,EAAnFC,cAAeC,EAAoEF,EAApEE,MAAOC,EAA6DH,EAA7DG,IAAKC,EAAwDJ,EAAxDI,SAAUC,EAA8CL,EAA9CK,YAAaC,EAAiCN,EAAjCM,UAAWC,EAAsBP,EAAtBO,YAAaC,EAASR,EAATQ,KADhD,EAEYC,oBAAS,GAFrB,mBAE3BC,EAF2B,KAEVC,EAFU,KAIlC,OACE,sBAAKC,UAAWX,EAAgB,qBAAhC,UAEE,qBAAKW,UAAU,kBAAkBC,QAAS,WAAOF,GAAoBD,IAArE,SACGR,IAGH,qBAAKU,UAAU,yBAAf,SACIF,GACA,sBAAKE,UAAU,iBAAf,UAEE,6BACGR,GAAYA,EAASU,KAAI,SAACC,EAAsBC,GAC/C,OACE,+BACGD,EAAUE,YADb,KAC4BF,EAAUG,KADtC,MAASF,QAOdX,GACCA,EAAYc,OAAS,GACrBd,EAAYS,KAAI,SAACM,EACLJ,GACZ,OACE,cAACjB,EAAD,CACEE,cAAe,uBACfC,MAAOkB,EAAWlB,MAElBE,SAAUgB,EAAWhB,UADhBY,MAMVV,GAAaA,EAAUa,OAAS,GAC/Bb,EAAUQ,KAAI,SAACO,GACb,OACE,+BACE,mBAAGC,KAAMD,EAASE,KAAlB,SACGF,EAASnB,QAEXmB,EAASJ,aAAT,YACMI,EAASJ,mBAOvBV,GAAeA,EAAYY,OAAS,GACnCZ,EAAYO,KAAI,SAACU,EAAwBR,GACvC,OACE,cAACjB,EAAD,CACEE,cAAe,iBACfC,MAAOsB,EAAWtB,MAElBM,KAAMgB,EAAWhB,MADZQ,MAOZR,GACC,qBAAKI,UAAU,OAAf,SACGJ,WAhEb,UAA8DP,EAA9D,YAA+EE,MCQpEsB,EAtBG,SAACzB,GACjB,OACE,qBAAKY,UAAU,oBAAf,SACIZ,EAAM0B,KAAKP,OAAS,GACpBnB,EAAM0B,KAAKZ,KAAI,SAACa,EAAcX,GAC5B,OACE,cAAC,EAAD,CACEf,cAAe,oBACfC,MAAOyB,EAAQzB,MAEfE,SAAUuB,EAAQvB,SAClBC,YAAasB,EAAQtB,YACrBC,UAAWqB,EAAQrB,UACnBC,YAAaoB,EAAQpB,aAJhBS,SCEJY,EAVK,CCPoB,CACtC1B,MAAO,oCACPE,SACE,CACE,CACEa,YAAa,iMACbC,KAAM,MAER,CACED,YAAa,+IACbC,KAAM,SAER,CACED,YAAa,sWACbC,KAAM,WCdgB,CAC5BhB,MAAO,QACPE,SACE,CACE,CACEa,YAAa,4EACbC,KAAM,iBAER,CACED,YAAa,mKACbC,KAAM,SAER,CACED,YAAa,0DACbC,KAAM,gBAER,CACED,YAAa,sEACbC,KAAM,SAER,CACED,YAAa,+DACbC,KAAM,SAER,CACED,YAAa,0BACbC,KAAM,QC1BuB,CACnChB,MAAO,uEACPE,SACE,CACE,CACEa,YAAa,0HACbC,KAAM,SAER,CACED,YAAa,8CACbC,KAAM,SAER,CACED,YAAa,iJACbC,KAAM,SAER,CACED,YAAa,2FACbC,KAAM,iBAER,CACED,YAAa,oNACbC,KAAM,MAER,CACED,YAAa,mbACbC,KAAM,MAER,CACED,YAAa,+LACbC,KAAM,MAER,CACED,YAAa,kIACbC,KAAM,MAER,CACED,YAAa,mHACbC,KAAM,MAER,CACED,YAAa,mYACbC,KAAM,QC1CiB,CAC7BhB,MAAO,SACPE,SACE,CACE,CACEa,YAAa,uGACbC,KAAM,iBAER,CACED,YAAa,mCACbC,KAAM,aAER,CACED,YAAa,yLACbC,KAAM,SAER,CACED,YAAa,0IACbC,KAAM,SAER,CACED,YAAa,8EACbC,KAAM,6BAER,CACED,YAAa,8FACbC,KAAM,SAER,CACED,YAAa,6FACbC,KAAM,UAGZb,YACE,CACE,CACEH,MAAO,mBACPE,SACA,CACE,CACEa,YAAa,oTACbC,KAAM,MACNV,KAAM,yEACNqB,MAAO,qEAKjBvB,UACE,CACE,CAAEJ,MAAO,aAAcqB,KAAM,QAEjChB,YACE,CACE,CACEL,MAAO,iBACP4B,OAAQ,2BACRtB,KAAM,4ECzDkB,CAC9BN,MAAO,UACPE,SACE,CACE,CACEa,YAAa,2IACbC,KAAM,WCNmB,CAC/BhB,MAAO,WACPE,SACE,CACE,CACEa,YAAa,oJACbC,KAAM,iBAER,CACED,YAAa,wOACbC,KAAM,MAER,CACED,YAAa,oKACbC,KAAM,MAER,CACED,YAAa,yFACbC,KAAM,SAER,CACED,YAAa,kDACbC,KAAM,MAER,CACED,YAAa,+DACbC,KAAM,MAER,CACED,YAAa,4FACbC,KAAM,MAER,CACED,YAAa,oFACbC,KAAM,WClCsB,CAClChB,MAAO,gBACPE,SACE,CACE,CACEa,YAAa,yEACbC,KAAM,gBAER,CACED,YAAa,0GACbC,KAAM,gBAER,CACED,YAAa,iEACbC,KAAM,mBCkDCa,G,MA3DF,WAAO,IAAD,EACiCtB,mBAAS,IAD1C,mBACVuB,EADU,KACGC,EADH,OAGmBxB,mBAAS,IAH5B,mBAGVyB,EAHU,KAGEC,EAHF,KA+BjB,OA3BAC,qBAAU,WAMR,GAJAH,EAAe,IAIXC,EAAWf,OAAS,GAAoB,MAAfe,EAAoB,CAC/C,IAAIG,EAAyB,GAE7BC,EAAgBC,SAAQ,SAAAZ,GAEtB,IAAIa,EAAqCb,EAAQvB,SAASU,KAAI,SAAAC,GAC5D,OAAOA,EAAUE,eAGC,UAAMU,EAAQzB,MAAd,YAAuBsC,EAAoBC,YAG5CC,cAAcC,QAAQT,EAAWQ,gBAAkB,GACpEL,EAAWO,KAAKjB,MAIpBM,EAAeI,MAEhB,CAACH,IAGF,qBAAKtB,UAAU,mBAAf,SACE,iCACA,sBAAKA,UAAU,gBAAf,UACE,yDACA,sBAAKA,UAAU,uBAAf,UACE,sDACA,uBACEiC,KAAK,OACLC,KAAK,SACLC,SAAU,SAACC,GAAOb,EAAca,EAAEC,OAAOC,aAG7C,qBAAKtC,UAAU,mBAAf,SACE,uCAAS,wBAAQC,QAAS,WAAOoB,EAAeK,IAAvC,uCAIX,qBAAK1B,UAAU,oBAAf,SACGoB,GACC,cAAC,EAAD,CAAWN,KAAMM,aC9CdmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3622ab8e.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport { Criterion, Subheading, Resource, CodeSample } from '../../assets/data/models';\n\nimport './accordion.scss';\n\ninterface Props {\n  accordionType: string,\n  title: string,\n  key: number,\n  criteria?: Array<Criterion>,\n  subheadings?: Array<Subheading>,\n  resources?: Array<Resource>,\n  codeSamples?: Array<CodeSample>\n  code?: string\n}\n\nconst Accordion = (props: Props) => {\n  const { accordionType, title, key, criteria, subheadings, resources, codeSamples, code } = props\n  const [isAccordionOpen, setIsAccordionOpen] = useState(false)\n\n  return (\n    <div className={accordionType + ' accordion-wrapper'} key={`${accordionType}-${key}`}>\n\n      <div className=\"accordion-title\" onClick={() => {setIsAccordionOpen(!isAccordionOpen)}}>\n        {title}\n      </div>\n\n      <div className=\"accordion-body-wrapper\">\n        { isAccordionOpen &&\n          <div className=\"accordion-body\">\n\n            <ul>\n              {criteria && criteria.map((criterion: Criterion, index: number) => {\n                return (\n                  <li key={index}>\n                    {criterion.description} ({criterion.wcag})\n                  </li>\n                )\n              })}\n            </ul>\n\n            {subheadings &&\n              subheadings.length > 0 &&\n              subheadings.map((subheading:\n              Subheading, index: number) => {\n              return (\n                <Accordion\n                  accordionType={'accordion-subheading'}\n                  title={subheading.title}\n                  key={index}\n                  criteria={subheading.criteria}\n                />\n              )\n            })}\n\n            {resources && resources.length > 0 &&\n              resources.map((resource) => {\n                return (\n                  <li>\n                    <a href={resource.link}>\n                      {resource.title}\n                    </a>\n                    {resource.description && (\n                      `: ${resource.description}`\n                    )}\n                  </li>\n                )\n              })\n            }\n\n            {codeSamples && codeSamples.length > 0 &&\n              codeSamples.map((codeSample: CodeSample, index: number) => {\n                return (\n                  <Accordion\n                    accordionType={'accordion-code'}\n                    title={codeSample.title}\n                    key={index}\n                    code={codeSample.code}\n                  />\n                )\n              })\n            }\n\n            {code &&\n              <div className=\"code\">\n                {code}\n              </div>\n            }\n          </div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Accordion;\n","import React from 'react';\n\nimport Accordion from '../../components/accordion/accordion'\n\ninterface Props {\n  data: any\n}\n\nconst Checklist = (props: Props) => {\n  return (\n    <div className=\"checklist-content\">\n      { props.data.length > 0 &&\n        props.data.map((element: any, index: number) => {\n          return (\n            <Accordion\n              accordionType={'accordion-element'}\n              title={element.title}\n              key={index}\n              criteria={element.criteria}\n              subheadings={element.subheadings}\n              resources={element.resources}\n              codeSamples={element.codeSamples}\n            />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default Checklist;\n","import { ariaDescribedby } from './elements/aria-describedby'\nimport { audio } from './elements/audio'\nimport { autoMovement } from './elements/auto-movement'\nimport { button } from './elements/button'\nimport { captcha } from './elements/captcha'\nimport { carousel } from './elements/carousel'\nimport { returnToTop } from './elements/return-to-top'\n\n\nconst elementData = [\n  ariaDescribedby,\n  audio,\n  autoMovement,\n  button,\n  captcha,\n  carousel,\n  returnToTop\n]\n\nexport default elementData\n","import { Element } from '../models'\n\nexport const ariaDescribedby: Element = {\n  title: 'aria-describedby, aria-labelledby',\n  criteria:\n    [\n      {\n        description: 'the value for <aria-describedby> or <aria-labelledby> isn’t the label itself; rather, it is a reference to a <p> or <span> with the same id which in turn is the actual description/label',\n        wcag: '--',\n      },\n      {\n        description: 'aria-describedby not that common, used when the description of the element and the element itself aren’t immediately next to each other',\n        wcag: '1.1.1',\n      },\n      {\n        description: 'to use: • create element to be described, with aria-describedby attribute: <button aria-describedby=\"btnDesc\">Click here</button>; • create a <p> with a unique id that matches the aria-describedby. This <p> is the description of the element:<p id=\"btnDesc\">Some instructions about the element</p>; • whitespaces are not allowed in ID’s',\n        wcag: '1.3.1',\n      },\n    ],\n}\n","import { Element } from '../models'\n\nexport const audio: Element = {\n  title: 'Audio',\n  criteria:\n    [\n      {\n        description: 'try to avoid having audio play immediately and automatically on page load',\n        wcag: 'best practice',\n      },\n      {\n        description: 'if you do have audio play automatically, you must provide means to stop/pause/mute/adjust volume of audio that automatically plays on a page for more than 3secs',\n        wcag: '1.4.2',\n      },\n      {\n        description: 'mechanism to do so must be achievable by keyboard alone',\n        wcag: '2.1.1, 1.4.2',\n      },\n      {\n        description: 'mechanism shouldn’t impact audio system-wide, just on the page',\n        wcag: '1.4.2',\n      },\n      {\n        description: 'mechanism must be accessible by keyboard shortcut/navigation',\n        wcag: '2.1.1',\n      },\n      {\n        description: 'audio must not autoplay',\n        wcag: '--',\n      },\n    ],\n}\n","import { Element } from '../models'\n\nexport const autoMovement: Element = {\n  title: 'Automatic movement (moving, blinking, scrolling, updating, flashing)',\n  criteria:\n    [\n      {\n        description: 'if the moving/blinking/scrolling lasts longer than *5 sec*, the user must be able to pause/stop/hide the moving element',\n        wcag: '2.2.2',\n      },\n      {\n        description: 'Pause/stop/hide must be keyboard accessible',\n        wcag: '2.1.1',\n      },\n      {\n        description: 'content that gets automatically updated must be able to be paused/stopped/hidden or the user must be able to control the timing of the updates',\n        wcag: '2.2.2',\n      },\n      {\n        description: 'Automatic movement like scrolling should be gradual and keep the focus element on-screen',\n        wcag: 'best practice',\n      },\n      {\n        description: 'Automatically updating content: screen readers will only present the changed parts of an element. If you want a screen reader to be notified of an entire region, use atomic attribute: <div aria-atomic=\"true\">:',\n        wcag: '--',\n      },\n      {\n        description: '• for example, you have a section that appears depending on what button the user clicks. The heading is always the same and the content changes, although some lines are the same. If <aria-atomic> is unset or set to “false”, the screen reader won’t read out the heading or the sentences in the content that is the same. If you want all of these things to be read out, <aria-atomic> must be set to “true”',\n        wcag: '--',\n      },\n      {\n        description: 'the section that appears should be appropriately/semantically identified (ie,  or )the section that appears should be appropriately/semantically identified (ie, <div role=\"dialog\"> or <p>)',\n        wcag: '--',\n      },\n      {\n        description: 'for automatically updated content, set the role attribute: <div role=\"alert\">, OR aria-live attribute: <div aria-live=\"polite\">',\n        wcag: '--',\n      },\n      {\n        description: '• the attributes are placed on elements that *already exist* in the DOM, not that are created on the update',\n        wcag: '--',\n      },\n      {\n        description: '• <aria-live=\"polite\">:  Any region which receives updates that are important for the user to receive, but not so rapid as to be annoying, should receive this attribute. The screen reader will speak changes whenever the user is idle. Set to “off” if the updates are not important or if the updates are so rapid that it would be annoying for the user to hear the updates',\n        wcag: '--',\n      },\n    ],\n}\n","import { Element } from '../models'\n\nexport const button: Element = {\n  title: 'Button',\n  criteria:\n    [\n      {\n        description: 'you can include  to generic buttons to prevent the browser from trying to submit a form when clicked',\n        wcag: 'best practice',\n      },\n      {\n        description: 'button must state disabled state',\n        wcag: 'TBC 4.1.2',\n      },\n      {\n        description: 'custom buttons must be able to be made active with enter AND spacebar, and must declare state. See “Overall (custom elements)” if you are creating a button without the HTML',\n        wcag: '4.1.2',\n      },\n      {\n        description: 'the down part of pressing a button should NOT trigger the event. The event trigger should be when the button is released (the up event)',\n        wcag: '2.5.2',\n      },\n      {\n        description: 'the name attribute must match the visible label of the button if one exists',\n        wcag: 'TBC if 2.5.3 applies here',\n      },\n      {\n        description: 'it must be visually apparent when a button is in focus, ie when the user tabs onto a button',\n        wcag: '2.4.7',\n      },\n      {\n        description: 'buttons that play the same function across different pages should have the same label+name',\n        wcag: '3.2.4',\n      },\n    ],\n  subheadings:\n    [\n      {\n        title: 'Icons as buttons',\n        criteria:\n        [\n          {\n            description: 'Icons as buttons: <br> 1) Wrapping element has aria-label (acts as button title for screen readers) if there is no text on button <br> 2) Icon itself is hidden <br> 3) Use CSS on  to insert icon <br> generally, we hide icons from screen readers and provide other ways for them to access the necessary info',\n            wcag: 'TBD',\n            code: '<button aria-label=\"Find out more\"><i aria-hidden=\"true\"></i></button>',\n            code2: '<button><i aria-hidden=\"true\"></i>Find out more</button> [TBC]'\n          },\n        ]\n      }\n    ],\n  resources:\n    [\n      { title: 'Resource 1', link: 'url'}\n    ],\n  codeSamples:\n    [\n      {\n        title: 'Icon as button',\n        output: 'img src string goes here',\n        code: '<button aria-label=\"Find out more\"><i aria-hidden=\"true\"></i></button>',\n      }\n    ]\n}\n","import { Element } from '../models'\n\nexport const captcha: Element = {\n  title: 'Captcha',\n  criteria:\n    [\n      {\n        description: 'Ensure there is an option to complete the CAPTCHA without vision (the alternative is usually an audo CAPTCHA, but modalities can differ)',\n        wcag: '1.1.1',\n      },\n    ],\n}\n","import { Element } from '../models'\n\nexport const carousel: Element = {\n  title: 'Carousel',\n  criteria:\n    [\n      {\n        description: 'don’t use if possible: there are a lot of accessibility challenges with carousels (plus they’re ineffective marketing tools in general)',\n        wcag: 'best practice',\n      },\n      {\n        description: '• screen reader users need to be notified that they’ve entered into a carousel, which slide they are currently on, they (+ keyboard users) need access to the content of the slide, and need to have access to the controls',\n        wcag: '--',\n      },\n      {\n        description: 'if you must create a carousel, inspect this page’s carousel https://w3c.github.io/aria-practices/examples/carousel/carousel-1.html for an accessible example',\n        wcag: '--',\n      },\n      {\n        description: '• user must be able to flip through carousel images via keyboard navigation keys:',\n        wcag: '2.1.1',\n      },\n      {\n        description: 'A) Dots under carousel that can tab through, or',\n        wcag: '--',\n      },\n      {\n        description: 'B) Prev/Next arrows on left+right of carousel to tab through',\n        wcag: '--',\n      },\n      {\n        description: '• user must be able to pause/stop/hide or control the timing of the carousel changes',\n        wcag: '--',\n      },\n      {\n        description: '• carousels must indicate its role and state, and its total number of slides',\n        wcag: '4.1.2',\n      },\n    ],\n}\n","import { Element } from '../models'\n\nexport const returnToTop: Element = {\n  title: 'Return to top',\n  criteria:\n    [\n      {\n        description: 'screen reader and keyboard/tabbing focus moves along with visual focus',\n        wcag: '1.3.2, 2.4.3',\n      },\n      {\n        description: '     elements that are interactive (like links) receive focus. Try not to give focus to static elements',\n        wcag: '1.3.2, 2.4.3',\n      },\n      {\n        description: '     set tab focus with attribute tab-index: <div tab-index=1>',\n        wcag: '1.3.2, 2.4.3',\n      },\n    ],\n}\n","import React, { useState, useEffect } from 'react';\n\nimport Checklist from '../checklist/checklist'\nimport allElementsData from '../../assets/data/element-data'\n\nimport './main.scss';\n\nconst Main = () => {\n  const [visibleData, setVisibleData]: Array<any> = useState([])\n\n  const [searchTerm, setSearchTerm] = useState('')\n  useEffect(() => {\n    // 1) Clear \"view All\", then do search\n    setVisibleData([]);\n\n    // 2) Search\n    // don't search empty string or single space\n    if (searchTerm.length > 0 && searchTerm !== ' ') {\n      let searchData: Array<any> = []\n\n      allElementsData.forEach(element => {\n        // pull out descriptions into an array\n        let elementDescriptions: Array<string> = element.criteria.map(criterion => {\n          return criterion.description\n        })\n        // convert array into string, and add title\n        const searchableText = `${element.title} ${elementDescriptions.toString()}`\n\n        // now search the array\n        if (searchableText.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {\n          searchData.push(element)\n        }\n      })\n\n      setVisibleData(searchData)\n    }\n  }, [searchTerm])\n\n  return (\n    <div className=\"mainpage-wrapper\">\n      <main>\n      <div className=\"mainpage-hero\">\n        <h1>Accessibility Checklist</h1>\n        <div className=\"search-input-wrapper\">\n          <p>Search for an element</p>\n          <input\n            type=\"text\"\n            name=\"search\"\n            onChange={(e) => {setSearchTerm(e.target.value)}}\n          />\n        </div>\n        <div className=\"view-all-wrapper\">\n          <span>or <button onClick={() => {setVisibleData(allElementsData)}}>view all elements</button></span>\n        </div>\n      </div>\n\n        <div className=\"checklist-wrapper\">\n          {visibleData && (\n            <Checklist data={visibleData}/>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Main from './pages/main/main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}